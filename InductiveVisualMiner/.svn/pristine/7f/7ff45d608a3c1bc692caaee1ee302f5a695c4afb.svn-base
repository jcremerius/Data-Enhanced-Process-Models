#version 130
attribute vec2 position;
attribute vec2 timeBounds;
attribute vec2 opacityBounds;
attribute vec3 colour;
attribute vec2 bezier0;
attribute vec2 bezier1;
attribute vec2 bezier2;
attribute vec2 bezier3;

uniform float time;
uniform vec2 imageSize;
uniform vec2 userScale;
uniform vec2 userTranslate;

out vec4 fColor;

varying vec2 texture_coordinate;

vec2 toDevice(in vec2 imageCoordinates, in vec2 imageSize) {
	return vec2((imageCoordinates / imageSize) * 2 - 1);
}

vec2 toImage(in vec2 modelCoordinates, in vec2 userScale, in vec2 userTranslate) {
	return vec2(modelCoordinates * userScale + userTranslate);
}

const ivec4 MyArray[4]=ivec4[4](
	ivec4(1,1,1,1),
	ivec4(1,1,1,1),
	ivec4(1,2,1,1),
	ivec4(1,3,3,1)
);
 
int choose(in int num, in int denom) {
	//assumption: 1 <= num <= 4
	return MyArray[num][denom];
}

float bernstein(in int numKnots, in int knotNo, in float param) {
    float iParam = 1 - param;
   
    float retVal = 1;
    retVal *= pow(param, knotNo);
    retVal *= pow(iParam, numKnots - knotNo);
    retVal *= choose(numKnots, knotNo);
    
    return retVal;
}

vec2 eval(in float param) {
	vec2 point = vec2(0, 0);
	
	//check how many control points there are
	int numKnots;
	numKnots = bezier3.x < -1000 ? (bezier2.x < -1000 ? (bezier1.x < -1000 ? 1 : 2) : 3) : 4;
	
	point += bezier0 * bernstein(numKnots - 1, 0, param);
	point += numKnots > 1 ? bezier1 * bernstein(numKnots - 1, 1, param) : vec2(0, 0);
	point += numKnots > 2 ? bezier2 * bernstein(numKnots - 1, 2, param) : vec2(0, 0);
	point += numKnots > 3 ? bezier3 * bernstein(numKnots - 1, 3, param) : vec2(0, 0);
    
    return point;
}

void main()
{   
	float radius = 10;
	vec4 posBezier;
	float choose = step(timeBounds.x, time) - step(timeBounds.y, time); //1 = token is displayed now; 0 = token is not being displayed now
	
	//compute the position (t) on the bezier
	float t;
	t = length(timeBounds) == 0 ? t = 0 : (time - timeBounds.x) / (timeBounds.y - timeBounds.x); //catch singleton-time token
	vec2 location = eval(t);
	
	vec2 image = toImage(position * radius + location, userScale, userTranslate);
        
    vec2 device = toDevice(image, imageSize);
   	
    posBezier = vec4(device, 0, 1);
    
    fColor = vec4(colour, (1 - t) * opacityBounds.x + t * opacityBounds.y);
    
    gl_Position = choose * posBezier + (1 - choose) * vec4(-100, -100, -100, 0);
    texture_coordinate = vec2(position.xy);
}